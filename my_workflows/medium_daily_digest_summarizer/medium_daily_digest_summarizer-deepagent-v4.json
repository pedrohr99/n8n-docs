{
  "name": "medium_daily_digest_summarizer",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "id": "c2889843-a887-44d1-b0ea-5b202f22d595",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        288,
        -48
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 5,
        "filters": {
          "q": "from:noreply@medium.com",
          "receivedAfter": "={{ $now.minus({ days: 1 }).toISO() }}"
        }
      },
      "id": "1bb48f61-2ccf-48d4-a478-ad1d3bf21bf7",
      "name": "Fetch Medium Digest",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        512,
        -48
      ],
      "webhookId": "c8e364fe-e8b8-4065-b242-18839db62912",
      "credentials": {
        "gmailOAuth2": {
          "id": "viPkNlIYja6xb7WC",
          "name": "Gmail account pedroh.r99"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "email-exists-condition",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "40c1a587-202e-48a9-915f-4df7d4d838a9",
      "name": "Check Email Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        736,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract article links from Medium Daily Digest email HTML\nconst emailData = $input.all();\n\nif (!emailData || emailData.length === 0) {\n  return [];\n}\n\nconst results = [];\n\nfor (const email of emailData) {\n  const htmlContent = email.json.payload?.parts?.find(part => part.mimeType === 'text/html')?.body?.data;\n  \n  if (!htmlContent) {\n    console.log('No HTML content found in email');\n    continue;\n  }\n  \n  // Decode base64 HTML content\n  const decodedHtml = Buffer.from(htmlContent, 'base64').toString('utf-8');\n  \n  // Extract Medium article links using regex\n  // Look for links that contain medium.com and appear to be article URLs\n  const linkRegex = /https:\\/\\/[^\\s\"'<>]*medium\\.com\\/[^\\s\"'<>]*[a-f0-9]{12}/gi;\n  const matches = decodedHtml.match(linkRegex) || [];\n  \n  // Remove duplicates and filter valid article URLs\n  const uniqueLinks = [...new Set(matches)]\n    .filter(link => {\n      // Filter out non-article URLs (like profile pages, topic pages, etc.)\n      return !link.includes('/tag/') && \n             !link.includes('/topics/') && \n             !link.includes('/@') && \n             link.includes('-');\n    })\n    .slice(0, 10); // Limit to 10 articles to avoid rate limiting\n  \n  console.log(`Found ${uniqueLinks.length} unique Medium article links`);\n  \n  // Create separate items for each link\n  uniqueLinks.forEach((link, index) => {\n    results.push({\n      json: {\n        articleUrl: link,\n        emailId: email.json.id,\n        emailSubject: email.json.payload?.headers?.find(h => h.name === 'Subject')?.value || 'Medium Daily Digest',\n        emailDate: email.json.payload?.headers?.find(h => h.name === 'Date')?.value || new Date().toISOString(),\n        articleIndex: index + 1\n      }\n    });\n  });\n}\n\nreturn results;"
      },
      "id": "7d692e41-974b-4b27-858b-f6e4ef03d125",
      "name": "Extract Article Links",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        -48
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "5ed5e658-2b2b-49a0-94c7-22ae4cf14e31",
      "name": "Process Articles One by One",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1168,
        -48
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.articleUrl }}",
        "options": {
          "redirect": {},
          "timeout": 30000
        }
      },
      "id": "fea31835-2a0c-4263-b880-bbcbe4845dcd",
      "name": "Fetch Article Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1392,
        -48
      ]
    },
    {
      "parameters": {},
      "id": "cbfd43b1-ae6c-47aa-af6a-097941116fd2",
      "name": "Rate Limit Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1616,
        -48
      ],
      "webhookId": "04c64539-1b90-4567-8444-03162de22689"
    },
    {
      "parameters": {
        "jsCode": "// Extract article title and content, then create summary\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const html = item.json.data || '';\n  const articleUrl = item.json.articleUrl;\n  \n  if (!html) {\n    results.push({\n      json: {\n        ...item.json,\n        title: 'Unable to fetch article',\n        summary: 'Could not retrieve article content.',\n        error: 'No HTML content received'\n      }\n    });\n    continue;\n  }\n  \n  try {\n    // Extract title - try multiple selectors\n    let title = '';\n    const titleMatches = [\n      html.match(/<title[^>]*>([^<]+)<\\/title>/i),\n      html.match(/<h1[^>]*>([^<]+)<\\/h1>/i),\n      html.match(/<meta[^>]*property=[\"']og:title[\"'][^>]*content=[\"']([^\"']+)[\"']/i),\n      html.match(/<meta[^>]*name=[\"']title[\"'][^>]*content=[\"']([^\"']+)[\"']/i)\n    ];\n    \n    for (const match of titleMatches) {\n      if (match && match[1]) {\n        title = match[1].trim();\n        // Clean up title\n        title = title.replace(/\\s*\\|\\s*Medium$/, '').replace(/\\s*â€”\\s*Medium$/, '').trim();\n        break;\n      }\n    }\n    \n    if (!title) {\n      title = 'Medium Article';\n    }\n    \n    // Extract article content - look for common Medium selectors\n    let content = '';\n    const contentMatches = [\n      html.match(/<article[^>]*>([\\s\\S]*?)<\\/article>/i),\n      html.match(/<div[^>]*class=[\"'][^\"']*article[^\"']*[\"'][^>]*>([\\s\\S]*?)<\\/div>/i),\n      html.match(/<main[^>]*>([\\s\\S]*?)<\\/main>/i)\n    ];\n    \n    for (const match of contentMatches) {\n      if (match && match[1]) {\n        content = match[1];\n        break;\n      }\n    }\n    \n    if (!content) {\n      // Fallback: extract all paragraph content\n      const paragraphs = html.match(/<p[^>]*>([\\s\\S]*?)<\\/p>/gi) || [];\n      content = paragraphs.slice(0, 10).join(' '); // First 10 paragraphs\n    }\n    \n    // Clean HTML tags and extract text\n    const cleanText = content\n      .replace(/<script[\\s\\S]*?<\\/script>/gi, '')\n      .replace(/<style[\\s\\S]*?<\\/style>/gi, '')\n      .replace(/<[^>]+>/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    // Create summary (first 2-3 sentences or ~200 characters)\n    let summary = '';\n    if (cleanText) {\n      const sentences = cleanText.match(/[^.!?]+[.!?]+/g) || [];\n      if (sentences.length >= 2) {\n        summary = sentences.slice(0, 3).join(' ').trim();\n      } else {\n        summary = cleanText.substring(0, 200).trim();\n        if (summary.length === 200 && cleanText.length > 200) {\n          summary += '...';\n        }\n      }\n    }\n    \n    if (!summary) {\n      summary = 'Unable to extract article summary from content.';\n    }\n    \n    results.push({\n      json: {\n        ...item.json,\n        title: title,\n        summary: summary,\n        wordCount: cleanText.split(' ').length,\n        extractedAt: new Date().toISOString()\n      }\n    });\n    \n  } catch (error) {\n    console.error('Error processing article:', error);\n    results.push({\n      json: {\n        ...item.json,\n        title: 'Processing Error',\n        summary: 'An error occurred while processing this article.',\n        error: error.message\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "394244fa-41d2-400a-aa8f-29eb76fb49e0",
      "name": "Extract Title & Summarize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        -48
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "articles",
        "options": {}
      },
      "id": "9318f4df-b22f-494b-ba3f-e1ac0d52e43d",
      "name": "Collect All Articles",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2048,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate markdown file with all articles\nconst items = $input.all();\n\nif (!items || items.length === 0) {\n  return [{\n    json: {\n      fileName: `medium_digest_${new Date().toISOString().split('T')[0]}.md`,\n      content: '# Medium Daily Digest\\n\\nNo articles found in today\\'s digest.',\n      articleCount: 0\n    }\n  }];\n}\n\nconst articles = items[0].json.articles || [];\nconst today = new Date();\nconst dateStr = today.toISOString().split('T')[0];\nconst formattedDate = today.toLocaleDateString('en-US', { \n  weekday: 'long', \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric' \n});\n\n// Create markdown content\nlet markdown = `# Medium Daily Digest - ${formattedDate}\\n\\n`;\nmarkdown += `*Generated on ${today.toISOString()}*\\n\\n`;\nmarkdown += `Found ${articles.length} articles in today's digest:\\n\\n`;\nmarkdown += '---\\n\\n';\n\n// Add each article\narticles.forEach((article, index) => {\n  markdown += `## ${index + 1}. ${article.title}\\n\\n`;\n  markdown += `**Summary:** ${article.summary}\\n\\n`;\n  markdown += `**Link:** [Read on Medium](${article.articleUrl})\\n\\n`;\n  \n  if (article.wordCount) {\n    markdown += `*Estimated reading: ~${Math.ceil(article.wordCount / 200)} minutes*\\n\\n`;\n  }\n  \n  markdown += '---\\n\\n';\n});\n\n// Add footer\nmarkdown += `\\n*This digest was automatically generated by n8n workflow.*\\n`;\nmarkdown += `*Total articles processed: ${articles.length}*\\n`;\n\nconst fileName = `medium_digest_${dateStr}.md`;\n\nreturn [{\n  json: {\n    fileName: fileName,\n    content: markdown,\n    articleCount: articles.length,\n    generatedAt: today.toISOString(),\n    articles: articles\n  }\n}];"
      },
      "id": "af70e66c-7b4b-4d03-abc9-d7c754504de7",
      "name": "Create Markdown File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2272,
        -48
      ]
    },
    {
      "parameters": {
        "name": "={{ $json.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "id": "63d3adee-7d42-4a7b-acc7-ed3ccd4d42df",
      "name": "Upload to Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2496,
        -48
      ]
    },
    {
      "parameters": {},
      "id": "30d47b4d-74dd-4ace-85d3-e68ff424fb6f",
      "name": "Success Notification",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2720,
        -48
      ]
    },
    {
      "parameters": {},
      "id": "d0227c28-e6eb-47c9-a339-45ed3b0f37d6",
      "name": "No Email Found",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        736,
        160
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.error }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "error"
            }
          ]
        },
        "options": {}
      },
      "id": "53849b0f-4108-434e-8426-4d76657b1b56",
      "name": "Error Handler",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2496,
        160
      ]
    },
    {
      "parameters": {},
      "id": "079e5ed5-6315-4a21-9cb6-7ba7146d3880",
      "name": "Error Notification",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2720,
        160
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "Fetch Medium Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Medium Digest": {
      "main": [
        [
          {
            "node": "Check Email Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Email Exists": {
      "main": [
        [
          {
            "node": "Extract Article Links",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Email Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Article Links": {
      "main": [
        [
          {
            "node": "Process Articles One by One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Articles One by One": {
      "main": [
        [
          {
            "node": "Fetch Article Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Collect All Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Article Content": {
      "main": [
        [
          {
            "node": "Rate Limit Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Wait": {
      "main": [
        [
          {
            "node": "Extract Title & Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Title & Summarize": {
      "main": [
        [
          {
            "node": "Process Articles One by One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect All Articles": {
      "main": [
        [
          {
            "node": "Create Markdown File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Markdown File": {
      "main": [
        [
          {
            "node": "Upload to Google Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Google Drive": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2b5b5993-384d-4c8c-8718-ac404272183b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a396a459e20e70dadf88b2d8f204762d2d80680fe1414733547fa53f595d718e"
  },
  "id": "esswZCIYhnb05I1S",
  "tags": [
    {
      "createdAt": "2025-08-28T14:38:43.090Z",
      "updatedAt": "2025-08-28T14:38:43.090Z",
      "id": "HMsT9ybSy7vtmctn",
      "name": "Medium Automation"
    }
  ]
}